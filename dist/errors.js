"use strict";

/**
 * Copyright 2014 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var ErrorMessages = exports.ErrorMessages = {
  UNEXPECTED_TOKEN: "Unexpected token {0}",
  UNEXPECTED_ILLEGAL_TOKEN: "Unexpected token ILLEGAL",
  UNEXPECTED_NUMBER: "Unexpected number",
  UNEXPECTED_STRING: "Unexpected string",
  UNEXPECTED_IDENTIFIER: "Unexpected identifier",
  UNEXPECTED_RESERVED_WORD: "Unexpected reserved word",
  UNEXPECTED_EOS: "Unexpected end of input",
  UNEXPECTED_LINE_TERMINATOR: "Unexpected line terminator",
  NEWLINE_AFTER_THROW: "Illegal newline after throw",
  INVALID_REGULAR_EXPRESSION: "Invalid regular expression",
  UNTERMINATED_REG_EXP: "Invalid regular expression: missing /",
  INVALID_LHS_IN_ASSIGNMENT: "Invalid left-hand side in assignment",
  INVALID_LHS_IN_FOR_IN: "Invalid left-hand side in for-in",
  MULTIPLE_DEFAULTS_IN_SWITCH: "More than one default clause in switch statement",
  NO_CATCH_OR_FINALLY: "Missing catch or finally after try",
  UNKNOWN_LABEL: "Undefined label '{0}'",
  LABEL_REDECLARATION: "Label '{0}' has already been declared",
  ILLEGAL_CONTINUE: "Illegal continue statement",
  ILLEGAL_BREAK: "Illegal break statement",
  ILLEGAL_RETURN: "Illegal return statement",
  STRICT_MODE_WITH: "Strict mode code may not include a with statement",
  STRICT_CATCH_VARIABLE: "Catch variable may not be eval or arguments in strict mode",
  STRICT_VAR_NAME: "Variable name may not be eval or arguments in strict mode",
  STRICT_PARAM_NAME: "Parameter name eval or arguments is not allowed in strict mode",
  STRICT_PARAM_DUPE: "Strict mode function may not have duplicate parameter names",
  STRICT_FUNCTION_NAME: "Function name may not be eval or arguments in strict mode",
  STRICT_OCTAL_LITERAL: "Octal literals are not allowed in strict mode.",
  STRICT_DELETE: "Delete of an unqualified identifier in strict mode.",
  DUPLICATE_PROTO_PROPERTY: "Duplicate __proto__ property in object literal not allowed",
  DUPLICATE_BINDING: "Duplicate binding '{0}'",
  LEXICALLY_BOUND_LET: "Invalid lexical binding name 'let'",
  ACCESSOR_DATA_PROPERTY: "Object literal may not have data and accessor property with the same name",
  ACCESSOR_GET_SET: "Object literal may not have multiple get/set accessors with the same name",
  STRICT_LHS_ASSIGNMENT: "Assignment to eval or arguments is not allowed in strict mode",
  STRICT_LHS_POSTFIX: "Postfix increment/decrement may not have eval or arguments operand in strict mode",
  STRICT_LHS_PREFIX: "Prefix increment/decrement may not have eval or arguments operand in strict mode",
  STRICT_RESERVED_WORD: "Use of future reserved word in strict mode",
  ILLEGAL_ARROW_FUNCTION_PARAMS: "Illegal arrow function parameter list",
  INVALID_VAR_INIT_FOR_IN: "Invalid variable declaration in for-in statement",
  INVALID_VAR_INIT_FOR_OF: "Invalid variable declaration in for-of statement",
  INVALID_VAR_LHS_FOR_OF: "Invalid left-hand-side expression in for-of statement",
  UNEXPECTED_SUPER_CALL: "Unexpected super call",
  UNEXPECTED_SUPER_PROPERTY: "Unexpected super property",
  IMPORT_DUPE: "Duplicate imported names in import declaration",
  UNEXPECTED_NEW_TARGET: "Unexpected new . target",
  DUPLICATE_EXPORTED_NAME: "Duplicate export of '{0}'",
  MODULE_EXPORT_UNDEFINED: "Export '{0}' is not defined in module",
  ILLEGAL_PROPERTY: "Illegal property initializer",
  DUPLICATE_CATCH_BINDING: "Catch parameter '{0}' redeclared as var in for-of loop" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lcnJvcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JPLElBQU0sYUFBYSxXQUFiLGFBQWEsR0FBRztBQUMzQixrQkFBZ0IsRUFBRSxzQkFBc0I7QUFDeEMsMEJBQXdCLEVBQUUsMEJBQTBCO0FBQ3BELG1CQUFpQixFQUFFLG1CQUFtQjtBQUN0QyxtQkFBaUIsRUFBRSxtQkFBbUI7QUFDdEMsdUJBQXFCLEVBQUUsdUJBQXVCO0FBQzlDLDBCQUF3QixFQUFFLDBCQUEwQjtBQUNwRCxnQkFBYyxFQUFFLHlCQUF5QjtBQUN6Qyw0QkFBMEIsRUFBRSw0QkFBNEI7QUFDeEQscUJBQW1CLEVBQUUsNkJBQTZCO0FBQ2xELDRCQUEwQixFQUFFLDRCQUE0QjtBQUN4RCxzQkFBb0IsRUFBRSx1Q0FBdUM7QUFDN0QsMkJBQXlCLEVBQUUsc0NBQXNDO0FBQ2pFLHVCQUFxQixFQUFFLGtDQUFrQztBQUN6RCw2QkFBMkIsRUFBRSxrREFBa0Q7QUFDL0UscUJBQW1CLEVBQUUsb0NBQW9DO0FBQ3pELGVBQWEsRUFBRSx1QkFBdUI7QUFDdEMscUJBQW1CLEVBQUUsdUNBQXVDO0FBQzVELGtCQUFnQixFQUFFLDRCQUE0QjtBQUM5QyxlQUFhLEVBQUUseUJBQXlCO0FBQ3hDLGdCQUFjLEVBQUUsMEJBQTBCO0FBQzFDLGtCQUFnQixFQUFFLG1EQUFtRDtBQUNyRSx1QkFBcUIsRUFBRSw0REFBNEQ7QUFDbkYsaUJBQWUsRUFBRSwyREFBMkQ7QUFDNUUsbUJBQWlCLEVBQUUsZ0VBQWdFO0FBQ25GLG1CQUFpQixFQUFFLDZEQUE2RDtBQUNoRixzQkFBb0IsRUFBRSwyREFBMkQ7QUFDakYsc0JBQW9CLEVBQUUsZ0RBQWdEO0FBQ3RFLGVBQWEsRUFBRSxxREFBcUQ7QUFDcEUsMEJBQXdCLEVBQUUsNERBQTREO0FBQ3RGLG1CQUFpQixFQUFFLHlCQUF5QjtBQUM1QyxxQkFBbUIsRUFBRSxvQ0FBb0M7QUFDekQsd0JBQXNCLEVBQUUsMkVBQTJFO0FBQ25HLGtCQUFnQixFQUFFLDJFQUEyRTtBQUM3Rix1QkFBcUIsRUFBRSwrREFBK0Q7QUFDdEYsb0JBQWtCLEVBQUUsbUZBQW1GO0FBQ3ZHLG1CQUFpQixFQUFFLGtGQUFrRjtBQUNyRyxzQkFBb0IsRUFBRSw0Q0FBNEM7QUFDbEUsK0JBQTZCLEVBQUUsdUNBQXVDO0FBQ3RFLHlCQUF1QixFQUFFLGtEQUFrRDtBQUMzRSx5QkFBdUIsRUFBRSxrREFBa0Q7QUFDM0Usd0JBQXNCLEVBQUUsdURBQXVEO0FBQy9FLHVCQUFxQixFQUFFLHVCQUF1QjtBQUM5QywyQkFBeUIsRUFBRSwyQkFBMkI7QUFDdEQsYUFBVyxFQUFFLGdEQUFnRDtBQUM3RCx1QkFBcUIsRUFBRSx5QkFBeUI7QUFDaEQseUJBQXVCLEVBQUUsMkJBQTJCO0FBQ3BELHlCQUF1QixFQUFFLHVDQUF1QztBQUNoRSxrQkFBZ0IsRUFBRSw4QkFBOEI7QUFDaEQseUJBQXVCLEVBQUUsd0RBQXdELEVBQ2xGLENBQUMiLCJmaWxlIjoic3JjL2Vycm9ycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTQgU2hhcGUgU2VjdXJpdHksIEluYy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgY29uc3QgRXJyb3JNZXNzYWdlcyA9IHtcbiAgVU5FWFBFQ1RFRF9UT0tFTjogXCJVbmV4cGVjdGVkIHRva2VuIHswfVwiLFxuICBVTkVYUEVDVEVEX0lMTEVHQUxfVE9LRU46IFwiVW5leHBlY3RlZCB0b2tlbiBJTExFR0FMXCIsXG4gIFVORVhQRUNURURfTlVNQkVSOiBcIlVuZXhwZWN0ZWQgbnVtYmVyXCIsXG4gIFVORVhQRUNURURfU1RSSU5HOiBcIlVuZXhwZWN0ZWQgc3RyaW5nXCIsXG4gIFVORVhQRUNURURfSURFTlRJRklFUjogXCJVbmV4cGVjdGVkIGlkZW50aWZpZXJcIixcbiAgVU5FWFBFQ1RFRF9SRVNFUlZFRF9XT1JEOiBcIlVuZXhwZWN0ZWQgcmVzZXJ2ZWQgd29yZFwiLFxuICBVTkVYUEVDVEVEX0VPUzogXCJVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dFwiLFxuICBVTkVYUEVDVEVEX0xJTkVfVEVSTUlOQVRPUjogXCJVbmV4cGVjdGVkIGxpbmUgdGVybWluYXRvclwiLFxuICBORVdMSU5FX0FGVEVSX1RIUk9XOiBcIklsbGVnYWwgbmV3bGluZSBhZnRlciB0aHJvd1wiLFxuICBJTlZBTElEX1JFR1VMQVJfRVhQUkVTU0lPTjogXCJJbnZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvblwiLFxuICBVTlRFUk1JTkFURURfUkVHX0VYUDogXCJJbnZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvbjogbWlzc2luZyAvXCIsXG4gIElOVkFMSURfTEhTX0lOX0FTU0lHTk1FTlQ6IFwiSW52YWxpZCBsZWZ0LWhhbmQgc2lkZSBpbiBhc3NpZ25tZW50XCIsXG4gIElOVkFMSURfTEhTX0lOX0ZPUl9JTjogXCJJbnZhbGlkIGxlZnQtaGFuZCBzaWRlIGluIGZvci1pblwiLFxuICBNVUxUSVBMRV9ERUZBVUxUU19JTl9TV0lUQ0g6IFwiTW9yZSB0aGFuIG9uZSBkZWZhdWx0IGNsYXVzZSBpbiBzd2l0Y2ggc3RhdGVtZW50XCIsXG4gIE5PX0NBVENIX09SX0ZJTkFMTFk6IFwiTWlzc2luZyBjYXRjaCBvciBmaW5hbGx5IGFmdGVyIHRyeVwiLFxuICBVTktOT1dOX0xBQkVMOiBcIlVuZGVmaW5lZCBsYWJlbCAnezB9J1wiLFxuICBMQUJFTF9SRURFQ0xBUkFUSU9OOiBcIkxhYmVsICd7MH0nIGhhcyBhbHJlYWR5IGJlZW4gZGVjbGFyZWRcIixcbiAgSUxMRUdBTF9DT05USU5VRTogXCJJbGxlZ2FsIGNvbnRpbnVlIHN0YXRlbWVudFwiLFxuICBJTExFR0FMX0JSRUFLOiBcIklsbGVnYWwgYnJlYWsgc3RhdGVtZW50XCIsXG4gIElMTEVHQUxfUkVUVVJOOiBcIklsbGVnYWwgcmV0dXJuIHN0YXRlbWVudFwiLFxuICBTVFJJQ1RfTU9ERV9XSVRIOiBcIlN0cmljdCBtb2RlIGNvZGUgbWF5IG5vdCBpbmNsdWRlIGEgd2l0aCBzdGF0ZW1lbnRcIixcbiAgU1RSSUNUX0NBVENIX1ZBUklBQkxFOiBcIkNhdGNoIHZhcmlhYmxlIG1heSBub3QgYmUgZXZhbCBvciBhcmd1bWVudHMgaW4gc3RyaWN0IG1vZGVcIixcbiAgU1RSSUNUX1ZBUl9OQU1FOiBcIlZhcmlhYmxlIG5hbWUgbWF5IG5vdCBiZSBldmFsIG9yIGFyZ3VtZW50cyBpbiBzdHJpY3QgbW9kZVwiLFxuICBTVFJJQ1RfUEFSQU1fTkFNRTogXCJQYXJhbWV0ZXIgbmFtZSBldmFsIG9yIGFyZ3VtZW50cyBpcyBub3QgYWxsb3dlZCBpbiBzdHJpY3QgbW9kZVwiLFxuICBTVFJJQ1RfUEFSQU1fRFVQRTogXCJTdHJpY3QgbW9kZSBmdW5jdGlvbiBtYXkgbm90IGhhdmUgZHVwbGljYXRlIHBhcmFtZXRlciBuYW1lc1wiLFxuICBTVFJJQ1RfRlVOQ1RJT05fTkFNRTogXCJGdW5jdGlvbiBuYW1lIG1heSBub3QgYmUgZXZhbCBvciBhcmd1bWVudHMgaW4gc3RyaWN0IG1vZGVcIixcbiAgU1RSSUNUX09DVEFMX0xJVEVSQUw6IFwiT2N0YWwgbGl0ZXJhbHMgYXJlIG5vdCBhbGxvd2VkIGluIHN0cmljdCBtb2RlLlwiLFxuICBTVFJJQ1RfREVMRVRFOiBcIkRlbGV0ZSBvZiBhbiB1bnF1YWxpZmllZCBpZGVudGlmaWVyIGluIHN0cmljdCBtb2RlLlwiLFxuICBEVVBMSUNBVEVfUFJPVE9fUFJPUEVSVFk6IFwiRHVwbGljYXRlIF9fcHJvdG9fXyBwcm9wZXJ0eSBpbiBvYmplY3QgbGl0ZXJhbCBub3QgYWxsb3dlZFwiLFxuICBEVVBMSUNBVEVfQklORElORzogXCJEdXBsaWNhdGUgYmluZGluZyAnezB9J1wiLFxuICBMRVhJQ0FMTFlfQk9VTkRfTEVUOiBcIkludmFsaWQgbGV4aWNhbCBiaW5kaW5nIG5hbWUgJ2xldCdcIixcbiAgQUNDRVNTT1JfREFUQV9QUk9QRVJUWTogXCJPYmplY3QgbGl0ZXJhbCBtYXkgbm90IGhhdmUgZGF0YSBhbmQgYWNjZXNzb3IgcHJvcGVydHkgd2l0aCB0aGUgc2FtZSBuYW1lXCIsXG4gIEFDQ0VTU09SX0dFVF9TRVQ6IFwiT2JqZWN0IGxpdGVyYWwgbWF5IG5vdCBoYXZlIG11bHRpcGxlIGdldC9zZXQgYWNjZXNzb3JzIHdpdGggdGhlIHNhbWUgbmFtZVwiLFxuICBTVFJJQ1RfTEhTX0FTU0lHTk1FTlQ6IFwiQXNzaWdubWVudCB0byBldmFsIG9yIGFyZ3VtZW50cyBpcyBub3QgYWxsb3dlZCBpbiBzdHJpY3QgbW9kZVwiLFxuICBTVFJJQ1RfTEhTX1BPU1RGSVg6IFwiUG9zdGZpeCBpbmNyZW1lbnQvZGVjcmVtZW50IG1heSBub3QgaGF2ZSBldmFsIG9yIGFyZ3VtZW50cyBvcGVyYW5kIGluIHN0cmljdCBtb2RlXCIsXG4gIFNUUklDVF9MSFNfUFJFRklYOiBcIlByZWZpeCBpbmNyZW1lbnQvZGVjcmVtZW50IG1heSBub3QgaGF2ZSBldmFsIG9yIGFyZ3VtZW50cyBvcGVyYW5kIGluIHN0cmljdCBtb2RlXCIsXG4gIFNUUklDVF9SRVNFUlZFRF9XT1JEOiBcIlVzZSBvZiBmdXR1cmUgcmVzZXJ2ZWQgd29yZCBpbiBzdHJpY3QgbW9kZVwiLFxuICBJTExFR0FMX0FSUk9XX0ZVTkNUSU9OX1BBUkFNUzogXCJJbGxlZ2FsIGFycm93IGZ1bmN0aW9uIHBhcmFtZXRlciBsaXN0XCIsXG4gIElOVkFMSURfVkFSX0lOSVRfRk9SX0lOOiBcIkludmFsaWQgdmFyaWFibGUgZGVjbGFyYXRpb24gaW4gZm9yLWluIHN0YXRlbWVudFwiLFxuICBJTlZBTElEX1ZBUl9JTklUX0ZPUl9PRjogXCJJbnZhbGlkIHZhcmlhYmxlIGRlY2xhcmF0aW9uIGluIGZvci1vZiBzdGF0ZW1lbnRcIixcbiAgSU5WQUxJRF9WQVJfTEhTX0ZPUl9PRjogXCJJbnZhbGlkIGxlZnQtaGFuZC1zaWRlIGV4cHJlc3Npb24gaW4gZm9yLW9mIHN0YXRlbWVudFwiLFxuICBVTkVYUEVDVEVEX1NVUEVSX0NBTEw6IFwiVW5leHBlY3RlZCBzdXBlciBjYWxsXCIsXG4gIFVORVhQRUNURURfU1VQRVJfUFJPUEVSVFk6IFwiVW5leHBlY3RlZCBzdXBlciBwcm9wZXJ0eVwiLFxuICBJTVBPUlRfRFVQRTogXCJEdXBsaWNhdGUgaW1wb3J0ZWQgbmFtZXMgaW4gaW1wb3J0IGRlY2xhcmF0aW9uXCIsXG4gIFVORVhQRUNURURfTkVXX1RBUkdFVDogXCJVbmV4cGVjdGVkIG5ldyAuIHRhcmdldFwiLFxuICBEVVBMSUNBVEVfRVhQT1JURURfTkFNRTogXCJEdXBsaWNhdGUgZXhwb3J0IG9mICd7MH0nXCIsXG4gIE1PRFVMRV9FWFBPUlRfVU5ERUZJTkVEOiBcIkV4cG9ydCAnezB9JyBpcyBub3QgZGVmaW5lZCBpbiBtb2R1bGVcIixcbiAgSUxMRUdBTF9QUk9QRVJUWTogXCJJbGxlZ2FsIHByb3BlcnR5IGluaXRpYWxpemVyXCIsXG4gIERVUExJQ0FURV9DQVRDSF9CSU5ESU5HOiBcIkNhdGNoIHBhcmFtZXRlciAnezB9JyByZWRlY2xhcmVkIGFzIHZhciBpbiBmb3Itb2YgbG9vcFwiLFxufTtcbiJdfQ==